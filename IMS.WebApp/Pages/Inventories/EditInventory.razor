@page "/editinventory/{InvId:int}"

@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject NavigationManager NavigationManger
@inject  IEditInventoryUseCase EditInventoryUseCase
<h3>EditInventory</h3>
<br/>

<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
                   @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>
    <div class="form-group">
        <label for="name">Quantity</label>
        <InputNumber id="quantity"
                     @bind-Value="inventory.Quantity"
                     class="form-control">
        </InputNumber>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
                     @bind-Value="inventory.Price"
                     class="form-control">
        </InputNumber>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>
@code {

    [Parameter]
    public int InvId { get; set; }

    private Inventory inventory = new Inventory();

    protected async override Task OnParametersSetAsync()
    {
        this.inventory = await  ViewInventoryByIdUseCase.ExeuteAysnc(this.InvId);
    }

    private async Task SaveInventory()
    {
       await EditInventoryUseCase.ExecuteAsync(inventory);
        NavigationManger.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManger.NavigateTo("/inventories");
    }
}

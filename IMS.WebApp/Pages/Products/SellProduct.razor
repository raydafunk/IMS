@page "/sell"
@using static IMS.WebApp.Components.CommonComponets.AutoCompeleteComponent;
@inject IViewProductByNameUserCase ViewProductByNameUserCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IJSRuntime JSRuntime

<h3>SellProduct</h3>
<br />

<EditForm id="sell-form" Model="sellVm" OnInvalidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="Po">  Sales Order #</label>
        <InputText id="po" @bind-Value="sellVm.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompeleteComponent Label="Product to Sell"
                                        SeracFunction="SerachProduct"
                                        OnItemSelected="OnItemSelected">
                </AutoCompeleteComponent>
                <input type="hidden" value="@sellVm.ProductId" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty"> Quantity</label>
        <InputNumber id="qty" @bind-Value="sellVm.QuanityToSell" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="price"> Unit Price</label>
        <InputNumber id="price" @bind-Value="sellVm.UnitPrice" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary"> Sell </button>
</EditForm>
@code {
    private SellVM sellVm = new SellVM();
    private Product? selectProduct = null;


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmittion", "sell-form");
        }
    }

    private  async Task<List<ItemViewModel>?> SerachProduct(string name)
    {
        var list =  await ViewProductByNameUserCase.ExecuteAsync(name);
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName }).ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectProduct = await ViewProductByIdUseCase.ExeuteAysnc(item.Id);

        sellVm.ProductId = item.Id;
        sellVm.Product = this.selectProduct;
        sellVm.UnitPrice = this.selectProduct.Price;
    }
    private async Task Sell()
    {
        await SellProductUseCase.ExecuteAsync(
           this.sellVm.SalesOrderNumber!,
           this.sellVm.Product!,
           this.sellVm.QuanityToSell,
           this.sellVm.UnitPrice,
           "Ray"
        );
        this.sellVm = new SellVM();
        this.selectProduct = null;

    }
}

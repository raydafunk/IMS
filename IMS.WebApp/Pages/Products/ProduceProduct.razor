@page "/produce"
@using IMS.CoreBussiness.Entities;
@using IMS.UseCases.Produce.Interface;
@using IMS.UseCases.Products.Interfaces;
@using IMS.WebApp.ViewModels;
@using static IMS.WebApp.Components.CommonComponets.AutoCompeleteComponent;

@inject IViewProductByNameUserCase ViewProductByNameUserCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IProduceProductUseCase ProduceProductUseCase
<h3>ProduceProduct</h3>
<br />

<EditForm Model="produceVM" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po"> Production #</label>
        <InputText id="po" @bind-Value="produceVM.ProductNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompeleteComponent Label="Product to Purchase"
                                        SeracFunction="SearchProduct"
                                        OnItemSelected="OnItemSelected">
                </AutoCompeleteComponent>
                <input type="hidden" value="@produceVM.ProductId" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty"> Quantity</label>
        <InputNumber id="qty" @bind-Value="produceVM.QuantityToProduct" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary"> Produce</button>
</EditForm>

@code {
    private ProductVM produceVM = new ProductVM();
    private Product? selectProduct = null;


    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list =  await ViewProductByNameUserCase.ExecuteAsync(name);
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName }).ToList();
    }
    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectProduct = await ViewProductByIdUseCase.ExeuteAysnc(item.Id);

        produceVM.ProductId = item.Id;
        produceVM.Product = this.selectProduct;

    }

    private async Task Produce()
    {
        await ProduceProductUseCase.ExecuteAsync(this.produceVM.ProductNumber!,
          this.selectProduct!,
           this.produceVM.QuantityToProduct,
           "Ray");

        produceVM = new ProductVM();
        this.selectProduct = null;
    }
}

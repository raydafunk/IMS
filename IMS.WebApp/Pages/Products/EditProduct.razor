@page "/editproduct/{id:int}"
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProdcutUserCase EditProductCase
@inject NavigationManager NavigationManger
<h3>EditProduct</h3>
<br/>
@if(this.product != null)
{
    <EditForm Model="product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
          <label for="name">Product Name</label>
          <InputText 
              id="name" 
              @bind-Value= "product.ProductName"
              class="form-control">
              </InputText>
      </div>
      <div class="form-group">
          <label for="name">Quantity</label>
          <InputNumber 
              id="quantity" 
              @bind-Value= "product.Quantity"
              class="form-control">
              </InputNumber>
      </div>
      <div class="form-group">
          <label for="price">Price</label>
          <InputNumber
              id="price" 
              @bind-Value= "product.Price"
              class="form-control">
        </InputNumber>
      </div>
      <div class="form-group">
          <label for="invs">Inventories</label>
          <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
      </div>
      <br/>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="CaneclAction">Cancel</button>
</EditForm>

}

@code {
    private Product? product;
    [Parameter]
    public int id { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        this.product = await  ViewProductByIdUseCase.ExeuteAysnc(this.id);
    }

    private async Task SaveProduct()
    {
        if(this.product != null)
        {
            await EditProductCase.ExectueAsync(this.product);
        }
        NavigationManger.NavigateTo("/products");

    }

    private void CaneclAction()
    {
        NavigationManger.NavigateTo("/products");
    }
}
